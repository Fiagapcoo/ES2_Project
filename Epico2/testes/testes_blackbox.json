{
	"info": {
		"_postman_id": "7201122b-9da2-4f12-928b-7146c76f1ba6",
		"name": "testes blackbox",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34609600",
		"_collection_link": "https://es2333.postman.co/workspace/-testes-blackbox~3cadf65a-c0b1-49e5-8fac-e91d20287a2e/collection/34609600-7201122b-9da2-4f12-928b-7146c76f1ba6?action=share&source=collection_link&creator=34609600"
	},
	"item": [
		{
			"name": "teste /health",
			"item": [
				{
					"name": "/health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validar resposta do GET /health\", () => {\r",
									"  const status = pm.response.code;\r",
									"  const jsonData = pm.response.json();\r",
									"\r",
									"  if (status === 200) {\r",
									"    const successSchema = {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": { \r",
									"          \"type\": \"string\", \r",
									"          \"const\": \"UP\",\r",
									"          \"description\": \"Deve indicar que o serviço está operacional\"\r",
									"        },\r",
									"        \"timestamp\": {\r",
									"          \"type\": \"string\",\r",
									"          \"format\": \"date-time\",\r",
									"          \"description\": \"Deve ser uma data ISO 8601 válida\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\"status\", \"timestamp\"],\r",
									"      \"additionalProperties\": false\r",
									"    };\r",
									"    \r",
									"    // Valida o schema da resposta\r",
									"    pm.expect(pm.response).to.have.jsonSchema(successSchema);\r",
									"    \r",
									"    // Validações adicionais\r",
									"    const now = new Date();\r",
									"    const serverTime = new Date(jsonData.timestamp);\r",
									"    const timeDiff = Math.abs(now - serverTime);\r",
									"    \r",
									"    pm.expect(timeDiff).to.be.lessThan(\r",
									"      10000, \r",
									"      \"O timestamp deve ter no máximo 10 segundos de diferença do tempo atual\"\r",
									"    );\r",
									"\r",
									"  } else if (status === 503) {\r",
									"    const serviceUnavailableSchema = {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": { \r",
									"          \"type\": \"string\", \r",
									"          \"const\": \"DOWN\",\r",
									"          \"description\": \"Deve indicar que o serviço está inoperante\"\r",
									"        },\r",
									"        \"timestamp\": {\r",
									"          \"type\": \"string\",\r",
									"          \"format\": \"date-time\",\r",
									"          \"description\": \"Deve ser uma data ISO 8601 válida\"\r",
									"        },\r",
									"        \"details\": {\r",
									"          \"type\": \"object\",\r",
									"          \"description\": \"Informações adicionais sobre o problema\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\"status\", \"timestamp\"],\r",
									"      \"additionalProperties\": true\r",
									"    };\r",
									"    pm.expect(pm.response).to.have.jsonSchema(serviceUnavailableSchema);\r",
									"\r",
									"  } else {\r",
									"    pm.expect.fail(`Status code inesperado: ${status}`);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:3000/health"
					},
					"response": []
				}
			]
		},
		{
			"name": "teste POST/api/app",
			"item": [
				{
					"name": "teste normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta tem mensagem de sucesso\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"App registered with success!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta tem o JWT token\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"appid\": \"myapp123\",\r\n  \"name\": \"Minha Aplicação\",\r\n  \"secret\": \"segredoSuperSecreto\",\r\n  \"role\": \"admin\",\r\n  \"password\": \"senha123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/app",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"app"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "teste repetido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 409 Conflicto\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"App already registered.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"appid\": \"myapp123\",\r\n  \"name\": \"Minha Aplicação\",\r\n  \"secret\": \"segredoSuperSecreto\",\r\n  \"role\": \"admin\",\r\n  \"password\": \"senha123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app"
					},
					"response": []
				},
				{
					"name": "teste sem componentes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for missing field\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has mandatory fields error message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"All fields are mandatory.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Minha Aplicação\",\r\n  \"secret\": \"segredoSuperSecreto\",\r\n  \"role\": \"admin\",\r\n  \"password\": \"senha123\"\r\n}"
						},
						"url": "http://localhost:3000/api/app"
					},
					"response": []
				},
				{
					"name": "teste sem role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 when only role is missing\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"appid\": \"myapp123\",\r\n  \"name\": \"Minha Aplicação\",\r\n  \"secret\": \"segredoSuperSecreto\",\r\n  \"password\": \"senha123\"\r\n}"
						},
						"url": "http://localhost:3000/api/app"
					},
					"response": []
				}
			]
		},
		{
			"name": "teste POST/api/app/password/:appid",
			"item": [
				{
					"name": "teste normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201 - Criação bem-sucedida\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Password created successfully!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"SecurePass@1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste password repetida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 409 - Conflito (senha repetida)\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro específica\", function() {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"Password for this app already exists.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta em JSON\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{valid_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste sem token valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token ausente\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro de autenticação\", function() {\r",
									"    pm.expect(pm.response.json().error).to.include(\"No token provided\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste app nao existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404 - App não existe\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de recurso não encontrado\", function() {\r",
									"    pm.expect(pm.response.json().error).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{valid_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/api/app/password/app_nao_existente"
					},
					"response": []
				}
			]
		},
		{
			"name": "teste PUT/api/app/password/:appid",
			"item": [
				{
					"name": "teste normal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Status 200 - Atualização bem-sucedida\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Password updated successfully!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Senha foi realmente alterada\", async () => {\r",
									"    // Verificação adicional seria necessária via GET\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"NewSecurePass@5678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste sem permissões",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Sem permissões\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"NoPermissionPass123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste sem token valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token inválido\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json().error).to.include(\"Invalid token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"NonvalidToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste app nao existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404 - App não existe\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().error).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"PasswordForGhostApp123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/app/password/myapp123"
					},
					"response": []
				}
			]
		},
		{
			"name": "teste GET/app/password/:appid/",
			"item": [
				{
					"name": "teste de receber passwords normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 - Consulta bem-sucedida\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Retorna a password correta\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.password).to.be.a('string');\r",
									"    pm.expect(response.password).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste de receber password de app nao existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404 - App não existe\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().error).to.include(\"Resource not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{valid_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/app/password/app_nao_existente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"app",
								"password",
								"app_nao_existente"
							],
							"query": [
								{
									"key": "",
									"value": "Bearer {{valid_token}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "teste de receber passwords com token invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token inválido\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json().error).to.include(\"Invalid token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/app/password/myapp123"
					},
					"response": []
				},
				{
					"name": "teste de receber pawords sem token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token ausente\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json().error).to.include(\"No token provided\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/app/password/myapp123"
					},
					"response": []
				}
			]
		},
		{
			"name": "teste GET/apps",
			"item": [
				{
					"name": "teste de pesquisar apps com permissoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 - Listagem bem-sucedida\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Retorna array de apps\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.apps).to.be.an('array');\r",
									"    pm.expect(response.apps.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Apps contêm campos obrigatórios\", () => {\r",
									"    const firstApp = pm.response.json().apps[0];\r",
									"    pm.expect(firstApp).to.have.property('appid');\r",
									"    pm.expect(firstApp).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": "http://localhost:3000/api/apps"
					},
					"response": []
				},
				{
					"name": "teste de pesquisar apps sem permissões",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - LIstagem nao é permitida a nao admins\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{valid_token}}",
								"type": "text"
							}
						]
					},
					"response": []
				},
				{
					"name": "teste de pesquisar apps com token invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token inválido\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json().error).to.include(\"Invalid token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "Bearer {{invalid_token}}",
								"type": "text"
							}
						]
					},
					"response": []
				},
				{
					"name": "teste de pesquisar apps sem token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 - Token ausente\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json().error).to.include(\"No token provided\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "teste base",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/api/app",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"appid\": \"testenovo\",\r\n  \"name\": \"APPteste\",\r\n  \"secret\": \"test123\",\r\n  \"password\": \"test123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/api/app"
			},
			"response": []
		}
	]
}